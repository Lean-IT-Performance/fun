// Script de test pour l'API Usage d'OpenAI
// Ce script permet de tester l'int√©gration sans utiliser la console admin

console.log('üß™ Test de l\'API Usage OpenAI - D√©but des tests...\n');

// Configuration de test
const testConfig = {
    // Dates de test (30 derniers jours)
    endDate: new Date().toISOString().split('T')[0],
    startDate: (() => {
        const date = new Date();
        date.setDate(date.getDate() - 30);
        return date.toISOString().split('T')[0];
    })()
};

console.log(`üìÖ P√©riode de test: ${testConfig.startDate} ‚Üí ${testConfig.endDate}\n`);

// Test 1: V√©rification des variables d'environnement
async function testEnvironmentConfig() {
    console.log('üîß Test 1: Configuration des variables d\'environnement');
    
    try {
        if (typeof process === 'undefined') {
            console.log('‚ö†Ô∏è  Variables d\'environnement non accessibles (environnement navigateur)');
            return false;
        }

        const apiKey = process.env.OPENAI_API_KEY;
        const orgId = process.env.OPENAI_ORG_ID;

        if (!apiKey) {
            console.log('‚ùå OPENAI_API_KEY manquante dans .env');
            return false;
        }

        if (!orgId) {
            console.log('‚ö†Ô∏è  OPENAI_ORG_ID manquante dans .env (optionnel mais recommand√©)');
        }

        console.log(`‚úÖ API Key configur√©e: ${apiKey.substring(0, 10)}...${apiKey.substring(apiKey.length - 4)}`);
        
        if (orgId) {
            console.log(`‚úÖ Organisation ID configur√©e: ${orgId}`);
        }
        
        return true;

    } catch (error) {
        console.log(`‚ùå Erreur configuration: ${error.message}`);
        return false;
    }
}

// Test 2: Test de connexion basique √† l'API OpenAI
async function testBasicConnection() {
    console.log('\nüåê Test 2: Connexion basique √† l\'API OpenAI');
    
    try {
        const apiKey = process.env.OPENAI_API_KEY;
        const orgId = process.env.OPENAI_ORG_ID;
        
        const headers = {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
        };

        if (orgId) {
            headers['OpenAI-Organization'] = orgId;
        }

        const response = await fetch('https://api.openai.com/v1/models', { headers });
        
        if (response.ok) {
            console.log('‚úÖ Connexion API OpenAI r√©ussie');
            return true;
        } else {
            console.log(`‚ùå Erreur connexion: ${response.status} ${response.statusText}`);
            return false;
        }

    } catch (error) {
        console.log(`‚ùå Erreur connexion: ${error.message}`);
        return false;
    }
}

// Test 3: Test sp√©cifique de l'endpoint Usage
async function testUsageEndpoint() {
    console.log('\nüìä Test 3: Acc√®s √† l\'endpoint Usage');
    
    try {
        const apiKey = process.env.OPENAI_API_KEY;
        const orgId = process.env.OPENAI_ORG_ID;
        
        const headers = {
            'Authorization': `Bearer ${apiKey}`,
            'Content-Type': 'application/json'
        };

        if (orgId) {
            headers['OpenAI-Organization'] = orgId;
        }

        const response = await fetch('https://api.openai.com/v1/usage', {
            method: 'POST',
            headers: headers,
            body: JSON.stringify({
                start_date: testConfig.startDate,
                end_date: testConfig.endDate
            })
        });

        if (response.ok) {
            const data = await response.json();
            console.log('‚úÖ Endpoint Usage accessible');
            console.log(`üìà Donn√©es r√©cup√©r√©es: ${data.data?.length || 0} jours de donn√©es`);
            
            if (data.data && data.data.length > 0) {
                const sample = data.data[0];
                console.log(`üìä Exemple de donn√©es:`);
                console.log(`   ‚Ä¢ Date: ${sample.aggregation_timestamp || sample.snapshot_id}`);
                console.log(`   ‚Ä¢ Requ√™tes: ${sample.n_requests || 0}`);
                console.log(`   ‚Ä¢ Tokens input: ${sample.n_context_tokens_total || 0}`);
                console.log(`   ‚Ä¢ Tokens output: ${sample.n_generated_tokens_total || 0}`);
            }
            
            return { success: true, data };
        } else {
            const errorText = await response.text();
            console.log(`‚ùå Erreur endpoint Usage: ${response.status} ${response.statusText}`);
            console.log(`   D√©tail: ${errorText}`);
            
            if (response.status === 403) {
                console.log('\nüí° Solution sugg√©r√©e:');
                console.log('   ‚Ä¢ L\'endpoint Usage n√©cessite un compte organisation OpenAI');
                console.log('   ‚Ä¢ V√©rifiez que votre compte a les bonnes permissions');
                console.log('   ‚Ä¢ Contactez le support OpenAI si n√©cessaire');
            }
            
            return { success: false, status: response.status, error: errorText };
        }

    } catch (error) {
        console.log(`‚ùå Erreur test endpoint: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Test 4: Test de la classe OpenAIAPI
async function testOpenAIAPIClass() {
    console.log('\nüèóÔ∏è  Test 4: Classe OpenAIAPI');
    
    try {
        // Simuler l'environnement comme dans la console admin
        if (typeof ConfigManager === 'undefined') {
            console.log('‚ö†Ô∏è  ConfigManager non disponible, simulation...');
            
            // Mock ConfigManager pour le test
            global.ConfigManager = class {
                constructor() {
                    this.config = {
                        openai: {
                            apiKey: process.env.OPENAI_API_KEY,
                            orgId: process.env.OPENAI_ORG_ID
                        }
                    };
                }
                
                async getSecureAPIKey() {
                    return this.config.openai.apiKey;
                }
                
                getOpenAIConfig() {
                    return this.config.openai;
                }
            };
        }

        if (typeof OpenAIAPI === 'undefined') {
            console.log('‚ùå Classe OpenAIAPI non disponible');
            console.log('   Assurez-vous que api.js est correctement charg√©');
            return false;
        }

        const configManager = new ConfigManager();
        const openaiAPI = new OpenAIAPI(configManager);
        
        console.log('‚úÖ Classe OpenAIAPI instanci√©e');
        
        // Test de r√©cup√©ration des stats
        const usageStats = await openaiAPI.getUsageStats(testConfig.startDate, testConfig.endDate);
        
        console.log('‚úÖ M√©thode getUsageStats ex√©cut√©e');
        console.log(`üìä Source des donn√©es: ${usageStats.dataSource}`);
        console.log(`üí∞ Co√ªt mensuel: $${usageStats.monthlyCost}`);
        console.log(`üî¢ Requ√™tes mensuelles: ${usageStats.monthlyRequests}`);
        console.log(`üéØ Tokens utilis√©s: ${usageStats.tokensUsed}`);
        
        return true;

    } catch (error) {
        console.log(`‚ùå Erreur test classe: ${error.message}`);
        return false;
    }
}

// Fonction principale de test
async function runAllTests() {
    console.log('üöÄ D√©marrage de tous les tests...\n');
    
    const results = {
        config: await testEnvironmentConfig(),
        connection: await testBasicConnection(),
        usage: await testUsageEndpoint(),
        apiClass: await testOpenAIAPIClass()
    };
    
    console.log('\nüìã R√©sultats des tests:');
    console.log('========================');
    console.log(`üîß Configuration:      ${results.config ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`üåê Connexion API:      ${results.connection ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`üìä Endpoint Usage:     ${results.usage.success ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    console.log(`üèóÔ∏è  Classe OpenAIAPI:  ${results.apiClass ? '‚úÖ PASS' : '‚ùå FAIL'}`);
    
    const allPassed = Object.values(results).every(r => r === true || r.success === true);
    
    console.log('\nüéØ R√©sultat global:');
    if (allPassed) {
        console.log('‚úÖ TOUS LES TESTS R√âUSSIS - L\'int√©gration est fonctionnelle !');
    } else {
        console.log('‚ùå CERTAINS TESTS ONT √âCHOU√â - V√©rifiez la configuration');
    }
    
    console.log('\nüìö Consultez admin/README-OPENAI-USAGE.md pour plus d\'informations');
    
    return results;
}

// Ex√©cution si script appel√© directement
if (typeof require !== 'undefined' && require.main === module) {
    runAllTests().catch(console.error);
}

// Export pour utilisation dans d'autres modules
if (typeof module !== 'undefined' && module.exports) {
    module.exports = {
        runAllTests,
        testEnvironmentConfig,
        testBasicConnection,
        testUsageEndpoint,
        testOpenAIAPIClass
    };
} 